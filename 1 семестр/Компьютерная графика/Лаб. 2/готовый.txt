using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp3
{
    public partial class Form1 : Form
    {
        PictureBox pictureBox1 = new PictureBox();
        static Bitmap flag = new Bitmap(1900, 1000);
        int xMin = 301, xMax = 1161, yMin = 181, yMax = 681;  
        Graphics flagGraphics = Graphics.FromImage(flag);
        Graphics formGraphics = Graphics.FromImage(flag);
        Pen BlackLine = new Pen(Color.Black, 1);
        Pen YellowLine = new Pen(Color.Yellow, 2);
        SolidBrush GreenBrush = new SolidBrush(Color.Green);
        SolidBrush WhiteBrush = new SolidBrush(Color.White);

        public int bit(float x, float y)
        {
            return
            ((x < xMin) ? 1 : 0) << 3 |
            ((x > xMax) ? 1 : 0) << 2 |
            ((y < yMin) ? 1 : 0) << 1 |
            ((y > yMax) ? 1 : 0);
        }

        public void Clipping(float x1, float y1, float x2, float y2)
        {
            int c1 = bit(x1, y1);
            int c2 = bit(x2, y2);
            float dx, dy;

            while ((c1 | c2) != 0)
            {
                if ((c1 & c2) != 0)
                    return;

                dx = x2 - x1;
                dy = y2 - y1;

                if (c1 != 0)
                {
                    if (x1 < xMin)
                    {
                        y1 += dy * (xMin - x1) / dx;
                        x1 = xMin;
                    }

                    if (x1 > xMax)
                    {
                        y1 += dy * (xMax - x1) / dx;
                        x1 = xMax;
                    }

                    if (y1 < yMin)
                    {
                        x1 += dx * (yMin - y1) / dy;
                        y1 = yMin;
                    }

                    if (y1 > yMax)
                    {
                        x1 += dx * (yMax - y1) / dy;
                        y1 = yMax;
                    }

                    c1 = bit(x1, y1);
                }
                else
                {
                    if (x2 < xMin)
                    {
                        y2 += dy * (xMin - x2) / dx;
                        x2 = xMin;
                    }

                    if (x2 > xMax)
                    {
                        y2 += dy * (xMax - x2) / dx;
                        x2 = xMax;
                    }

                    if (y2 < yMin)
                    {
                        x2 += dx * (yMin - y2) / dy;
                        y2 = yMin;
                    }

                    if (y2 > yMax)
                    {
                        x2 += dx * (yMax - y2) / dy;
                        y2 = yMax;
                    }

                    c2 = bit(x2, y2);
                }
            }
            DrawBrezenhanLine(Color.Green, (int)x1  * 20, (int)y1 * 20, (int)x2 * 20, (int)y2 * 20);
        }

        public void FillPixel(Color color, int x1, int y1)
        {
            SolidBrush brush = new SolidBrush(color);
            SolidBrush brushOut = new SolidBrush(Color.Orange);
            //int xMin = 301, xMax = 1161, yMin = 181, yMax = 681;
            #region
            if (x1 > (xMin - 1) && x1 < (xMax + 19) && y1 > (yMin - 1) && y1 < (yMax + 19))
                formGraphics.FillRectangle(brush, new Rectangle(x1, y1, 19, 19));
            else
                #endregion
            //x от 17 до 58 включ.
            //y от 11 до 34 включ.
            formGraphics.FillRectangle(brushOut, new Rectangle(x1, y1, 19, 19));
        }

        public void DrawGrid(Graphics flagGraphics)
        {
            for (int y = 0; y < 1000; y = y + 20)
            {
                flagGraphics.DrawLine(BlackLine, 0, y, 1900, y);
            }
            for (int x = 0; x < 1900; x = x + 20)
            {
                flagGraphics.DrawLine(BlackLine, x, 0, x, 1000);
            }
        }

        public void DrawBrezenhanLine(Color color, int x1, int y1, int x2, int y2)
        {
            int x, y, dx = Math.Abs(x2 - x1) / 20, dy = Math.Abs(y2 - y1) / 20;
            x = x1;
            y = y1;
            FillPixel(color, x1, y1);
            FillPixel(color, x2, y2);
            if (dx > dy)
            {
                int d = (dy * 2 - dx), d1 = (dy * 2), d2 = ((dy - dx) * 2);
                if (x < x2)
                    x2 -= 20;
                else
                    x2 += 20;
                while (x < x2 ? x < x2 : x > x2)
                {
                    if ((x2 - x1) < 0)
                        x -= 20;
                    else
                        x += 20;
                    if (d < 0)
                        d += d1;
                    else
                    {
                        if ((y2 - y1) < 0)
                            y -= 20;
                        else
                            y += 20;
                        d += d2;
                    }
                    FillPixel(color, x, y);
                }
            }
            else
            {
                int d = (dx * 2 - dy), d1 = (dx * 2), d2 = ((dx - dy) * 2);
                if (y < y2)
                    y2 -= 20;
                else
                    y2 += 20;
                while (y < y2 ? y < y2 : y > y2)
                {
                    if ((y2 - y1) < 0)
                        y -= 20;
                    else
                        y += 20;
                    if (d < 0)
                        d += d1;
                    else
                    {
                        if ((x2 - x1) < 0)
                            x -= 20;
                        else
                            x += 20;
                        d += d2;
                    }
                    FillPixel(color, x, y);
                }
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            formGraphics.FillRectangle(WhiteBrush, new Rectangle(0, 0, 1900, 1000));
            DrawAll();
        }

        public void DrawFigures(int valueX, int valueY)
        {
            //брезенхам
            DrawBrezenhanLine(Color.Green, 1 + (valueX * 20), 121 + (valueY * 20), 401 + (valueX * 20), 121 + (valueY * 20));  //y + 320 , 16
            DrawBrezenhanLine(Color.Green, 201 + (valueX * 20), 1 + (valueY * 20), 401 + (valueX * 20), 361 + (valueY * 20));  //x + 1160 , 58
            DrawBrezenhanLine(Color.Green, 1 + (valueX * 20), 361 + (valueY * 20), 401 + (valueX * 20), 361 + (valueY * 20));
            DrawBrezenhanLine(Color.Green, 201 + (valueX * 20), 1 + (valueY * 20), 1 + (valueX * 20), 361 + (valueY * 20));
            DrawBrezenhanLine(Color.Green, 201 + (valueX * 20), 481 + (valueY * 20), 1 + (valueX * 20), 121 + (valueY * 20));
            DrawBrezenhanLine(Color.Green, 201 + (valueX * 20), 481 + (valueY * 20), 401 + (valueX * 20), 121 + (valueY * 20));
        }

        public void DrawFigureLines(int valueX, int valueY)
        {
            //star
            flagGraphics.DrawLine(YellowLine, 0 + (valueX * 20), 130 + (valueY * 20), 420 + (valueX * 20), 130 + (valueY * 20));
            flagGraphics.DrawLine(YellowLine, 210 + (valueX * 20), 0 + (valueY * 20), 420 + (valueX * 20), 370 + (valueY * 20));
            flagGraphics.DrawLine(YellowLine, 0 + (valueX * 20), 370 + (valueY * 20), 420 + (valueX * 20), 370 + (valueY * 20));
            flagGraphics.DrawLine(YellowLine, 0 + (valueX * 20), 370 + (valueY * 20), 210 + (valueX * 20), 0 + (valueY * 20));
            flagGraphics.DrawLine(YellowLine, 0 + (valueX * 20), 130 + (valueY * 20), 210 + (valueX * 20), 500 + (valueY * 20));
            flagGraphics.DrawLine(YellowLine, 210 + (valueX * 20), 500 + (valueY * 20), 420 + (valueX * 20), 130 + (valueY * 20));
        }

        public void DrawLimits()
        {
            DrawBrezenhanLine(Color.Red, xMin, yMin, xMax, yMin);
            DrawBrezenhanLine(Color.Red, xMin, yMin, xMin, yMax);
            DrawBrezenhanLine(Color.Red, xMax, yMin, xMax, yMax);
            DrawBrezenhanLine(Color.Red, xMin, yMax, xMax, yMax);
        }

        public void DrawAll()
        {
            Random rnd = new Random();
            int valueX = rnd.Next(0, 58);
            int valueY = rnd.Next(0, 26);

            pictureBox1.Size = new Size(1900, 1000);
            this.Controls.Add(pictureBox1);
            DrawGrid(flagGraphics);           
            DrawFigures(valueX, valueY);          
            DrawLimits();
            DrawFigureLines(valueX, valueY);
            pictureBox1.Image = flag;
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            DrawAll();
            pictureBox1.Click += new EventHandler(pictureBox1_Click);
        }
    }
}